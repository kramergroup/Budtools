import datetime
from pt import pt
import getopt
import sys
import json

JSON = {
    "potcardirectory": "/Users/budmacaulay/POT_GGA_PAW_PBE/",
    "initialincar": "/Users/budmacaulay/Desktop/surfaces/Co/441-10vac/INCAR",
    "kpointscheme": "Monkhorstpack"
}


def vprint(s, verbose=False):
    if verbose:
        print(s)


def potcarfromposcar(inputstructure, potcardir,):
    # Read line 5.
    poslist = []
    with open(inputstructure) as pos:
        for line in pos:
            poslist.append(line)
        potline = poslist[5].split()
    with open('/'.join(inputstructure.split('/')[0:-1]) + '/POTCAR',
              'w+') as outfile:  # Write the potcar to the poscar dir.
        for elements in potline:
            with open('{0}{1}/POTCAR'.format(potcardir, elements)) as potfile:
                for line in potfile:
                    outfile.write(line)


def incarfromposcar(inputstructure, initialincar, verbose=True):
    print("current defined atoms are stored in the pt.py file - if it's not there feel free to add it")
    f = open(inputstructure)
    liz = []
    for line in f:
        if len(liz) < 8:
            liz.append(line)
        else:
            break

    vprint(str(len(liz[5].split())) + ' elements found in POSCAR', verbose)
    vprint('elements are ' + liz[5], verbose)

    elelist = liz[5].split()  # Making the list of elements in the poscar
    magmomstr = 'MAGMOM = '  # This is the dumbest way to do this but holy lord i'm lazy as hell
    ldaulstr = 'LDAUL = '
    ldauustr = 'LDAUU = '
    ldaujstr = 'LDAUJ = '
    counter = 0
    for element in elelist:
        if pt.get(element).get('magmomV'):  # Magmom stuff
            vprint('yes mag data found for {}'.format(element))
            magmomstr = '{0}{1}*{2}.0 '.format(magmomstr, str(liz[6].split()[counter]),
                                               str(pt.get(element).get('magmomV')))

        else:
            vprint('no mag data found for {} setting to 0'.format(element))
            magmomstr = magmomstr + str(liz[6].split()[counter]) + '*0.0 '

        if pt.get(element).get('hubbardu'):  # HubbardU stuff
            vprint('hubbardU info for {} found'.format(element), verbose)
            ldaulstr = ldaulstr + str(pt.get(element).get('U').get('cedar').get('Lval')) + ' '
            ldauustr = ldauustr + str(pt.get(element).get('U').get('cedar').get('Uval')) + ' '
            ldaujstr = ldaujstr + str(pt.get(element).get('U').get('cedar').get('Jval')) + ' '
        else:
            vprint('no hubbard U info for {} found assuming no hubbard U needed'.format(element), verbose)
            ldaulstr = ldaulstr + '-1 '
            ldauustr = ldauustr + '0.00 '
            ldaujstr = ldaujstr + '0.00 '
        counter += 1
    with open(str(initialincar)) as infile:
        inc_1 = 0
        incar_lofl = [[]]
        for line in infile:
            if line == '\n':
                incar_lofl[inc_1].append('\n')
                incar_lofl.append([])
                inc_1 += 1
            else:
                incar_lofl[inc_1].append(line)
        incar_lofl = [x for x in incar_lofl if x != []]
        incar_lofl = [item for sublist in incar_lofl for item in sublist if
                      not item.startswith('!')]
        incar_lofl = [x.strip() for x in incar_lofl]

        counter = 0
        while counter < len(incar_lofl):
            if incar_lofl[counter].startswith('gen'):  # Puts a date of creation on the header line.
                incar_lofl[counter] = 'general: - !auto generated by BSM on ' + str(datetime.datetime.now())
                # From here on out, it'll check if you have these flags in your initial incar and update
                # them to match the specified info for the element. It only does lda and magmom atm :)
            if incar_lofl[counter].startswith('MAGMOM'):
                vprint('line ' + str(counter) + 'being updated', verbose)
                incar_lofl[counter] = magmomstr
            if incar_lofl[counter].startswith('LDAUL'):
                vprint('line ' + str(counter) + 'being updated', verbose)
                incar_lofl[counter] = ldaulstr
            if incar_lofl[counter].startswith('LDAUU'):
                vprint('line ' + str(counter) + 'being updated', verbose)
                incar_lofl[counter] = ldauustr
            if incar_lofl[counter].startswith('LDAUJ'):
                incar_lofl[counter] = ldaujstr
            counter += 1
    incar_write = '\n'.join(incar_lofl)  # restring it

    with open('/'.join(inputstructure.split('/')[0:-1]) + '/INCAR',
              'w+') as outfile:
        outfile.write(incar_write)  # write it


def kpointsfromposcar(inputstructure, kpoints):
    if JSON.get('kpointscheme').lower() == 'monkhorstpack':
        kpo = 'Automatic mesh !by vaspgen\n0\nGamma\n{0} {1} {2}\n0. 0. 0.\n'.format(kpoints[0], kpoints[1],
                                                                                     kpoints[2])
    elif JSON.get('kpointscheme') == 'R_k':
        kpo = 'Automatic mesh !by vaspgen\n0 \nAuto\n20'
    else:
        print('KPOINT SCHEME NOT RECOGNISED')
    with open('/'.join(inputstructure.split('/')[0:-1]) + '/KPOINTS', 'w+') as kfile:
        kfile.write(kpo)


def vaspgen(inputstructure, potcar=True, kpoints=[6, 6, 6], incar=True): # Small wrapped for the stuff above.

    print('reading structure using pymatgen')
    if potcar:
        potcarfromposcar(inputstructure, potcardir=JSON.get('potcardirectory'))

    if not kpoints:
        pass
    else:
        kpointsfromposcar(inputstructure, kpoints)

    if incar:
        print('Making the INCAR from POSCAR and file in config labelled initialincar')
        incarfromposcar(inputstructure, initialincar=JSON.get('initialincar'))
